{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { User } from '../model/user';\nimport { environment } from '../../environments/environment';\nimport { logout } from '../user/state/user.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@ngrx/store\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http, store) {\n      this.router = router;\n      this.http = http;\n      this.store = store;\n      this.authenticateUrl = `${environment.apiUrl}/api/users/authenticate`;\n      this.registerUrl = `${environment.apiUrl}/api/users/register`;\n      // Mock credentials\n      this.mockUsername = 'demo';\n      this.mockPassword = 'demo123';\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n    }\n    get userValue() {\n      return this.userSubject.value;\n    }\n    login(username, password) {\n      // Mock login implementation\n      if (username === this.mockUsername && password === this.mockPassword) {\n        const userObj = new User();\n        userObj.username = username;\n        userObj.password = password;\n        localStorage.setItem('user', JSON.stringify(userObj));\n        this.userSubject.next(userObj);\n        return of(true);\n      }\n      return of(false);\n    }\n    logout() {\n      this.store.dispatch(logout());\n      this.router.navigate(['/account/login']);\n    }\n    register(user) {\n      return this.http.post(this.registerUrl, user).subscribe(err => console.error(err));\n    }\n    static #_ = this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Store));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}