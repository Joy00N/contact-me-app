{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.userUrl = 'http://localhost:8080/api/users';\n    }\n    getUsers() {\n      return this.http.get(this.userUrl).pipe(catchError(this.handleError));\n    }\n    setUsers(user) {\n      this.http.post(this.userUrl, user).subscribe(err => console.error(err));\n    }\n    handleError(err) {\n      let errorMessage;\n      if (err.error instanceof ErrorEvent) {\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n      }\n      console.error(err);\n      return throwError(errorMessage);\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}