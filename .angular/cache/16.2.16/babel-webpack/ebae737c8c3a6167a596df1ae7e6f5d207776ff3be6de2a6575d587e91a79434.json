{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, retry, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor(http) {\n      this.http = http;\n      this.contactUrl = `${environment.apiUrl}/contacts`;\n      this.emailUrl = `${environment.apiUrl}/sendEmail`;\n    }\n    getContacts(page = 1, pageSize = environment.defaultPageSize) {\n      const params = new HttpParams().set('page', page.toString()).set('pageSize', pageSize.toString());\n      return this.http.get(this.contactUrl, {\n        params\n      }).pipe(retry(3), tap(data => console.log('Contacts fetched successfully:', data)), catchError(this.handleError));\n    }\n    setContact(contact) {\n      return this.http.post(this.contactUrl, contact).pipe(tap(data => console.log('Contact created successfully:', data)), catchError(this.handleError));\n    }\n    updateContact(contact) {\n      return this.http.put(`${this.contactUrl}/${contact.id}`, contact).pipe(tap(data => console.log('Contact updated successfully:', data)), catchError(this.handleError));\n    }\n    deleteContact(id) {\n      return this.http.delete(`${this.contactUrl}/${id}`).pipe(tap(() => console.log('Contact deleted successfully')), catchError(this.handleError));\n    }\n    sendEmail(contactId) {\n      return this.http.post(this.emailUrl, {\n        contactId\n      }).pipe(tap(() => console.log('Email sent successfully')), catchError(this.handleError));\n    }\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        switch (error.status) {\n          case 400:\n            errorMessage = 'Bad Request: Invalid data provided';\n            break;\n          case 401:\n            errorMessage = 'Unauthorized: Please log in';\n            break;\n          case 403:\n            errorMessage = 'Forbidden: You do not have permission';\n            break;\n          case 404:\n            errorMessage = 'Not Found: The requested resource was not found';\n            break;\n          case 500:\n            errorMessage = 'Internal Server Error: Please try again later';\n            break;\n          default:\n            errorMessage = `Server Error: ${error.status} ${error.statusText}`;\n        }\n      }\n      console.error('API Error:', error);\n      return throwError(() => new Error(errorMessage));\n    }\n    static #_ = this.ɵfac = function ContactService_Factory(t) {\n      return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContactService,\n      factory: ContactService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}