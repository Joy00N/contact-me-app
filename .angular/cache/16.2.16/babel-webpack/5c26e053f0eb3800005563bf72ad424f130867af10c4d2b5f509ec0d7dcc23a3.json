{"ast":null,"code":"import { interval } from 'rxjs';\nimport { switchMap, takeWhile, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./contact.service\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor(http, contactService) {\n      this.http = http;\n      this.contactService = contactService;\n      this.notificationUrl = `${environment.apiUrl}/notifications`;\n      this.isNotificationEnabled = true;\n      this.startNotificationCheck();\n    }\n    startNotificationCheck() {\n      interval(environment.notificationInterval).pipe(takeWhile(() => this.isNotificationEnabled), switchMap(() => this.checkExpiredContacts())).subscribe();\n    }\n    checkExpiredContacts() {\n      return this.contactService.getContacts().pipe(tap(contacts => {\n        const expiredContacts = contacts.filter(contact => contact.isExpired && !contact.lastNotificationSent);\n        if (expiredContacts.length > 0) {\n          this.sendExpiredNotifications(expiredContacts);\n        }\n      }));\n    }\n    sendExpiredNotifications(contacts) {\n      contacts.forEach(contact => {\n        this.http.post(`${this.notificationUrl}/expired`, {\n          contactId: contact.id,\n          productName: contact.productName,\n          expirationDate: contact.expirationDate\n        }).subscribe({\n          next: () => {\n            // Update the contact's last notification sent date\n            this.contactService.updateContact({\n              ...contact,\n              lastNotificationSent: new Date().toISOString()\n            }).subscribe();\n          },\n          error: error => console.error('Failed to send notification:', error)\n        });\n      });\n    }\n    enableNotifications() {\n      this.isNotificationEnabled = true;\n    }\n    disableNotifications() {\n      this.isNotificationEnabled = false;\n    }\n    sendTestNotification() {\n      return this.http.post(`${this.notificationUrl}/test`, {});\n    }\n    static #_ = this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ContactService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}