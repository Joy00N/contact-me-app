{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/account.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(router, accountService) {\n      this.router = router;\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error.status === 401) {\n          // Token expired or invalid\n          this.accountService.logout();\n          this.router.navigate(['/account/login']);\n        }\n        return throwError(() => error);\n      }));\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}